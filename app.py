# app.py ‚Äî –ú–∞—Ç–≤–µ–π –°–ø–∏—Ü—ã–Ω: –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ + site-analytics (Supabase, 1-user-1-vote)

# === 1. –ò–º–ø–æ—Ä—Ç –∏ –°–†–ê–ó–£ set_page_config ===
import streamlit as st
st.set_page_config(
    page_title="–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ú–∞—Ç–≤–µ—è –°–ø–∏—Ü—ã–Ω–∞ | –ê–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö",
    page_icon="üìä",
    layout="wide",
)

import time
import uuid
from datetime import datetime, timezone
from collections import Counter
from pathlib import Path

import streamlit.components.v1 as components
from supabase import create_client
from streamlit_cookies_manager import EncryptedCookieManager

# ===========================
# Supabase client (URL/KEY –∏–∑ st.secrets)
# ===========================
SB_URL = st.secrets.get("SUPABASE_URL")
SB_KEY = st.secrets.get("SUPABASE_KEY")
if not SB_URL or not SB_KEY:
    st.error("–ù–µ—Ç —Å–µ–∫—Ä–µ—Ç–æ–≤ SUPABASE_URL / SUPABASE_KEY. –ó–∞–¥–∞–π –∏—Ö –≤ Settings ‚Üí Secrets.")
    st.stop()
sb = create_client(SB_URL, SB_KEY)

# ===========================
# Cookies: –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π visitor_id (–¥–ª—è 1-user-1-vote –∏ —Å–µ—Å—Å–∏–π)
# ===========================
COOKIE_PASSWORD = st.secrets.get("COOKIE_PASSWORD", "dev-only-unsafe")
cookies = EncryptedCookieManager(prefix="msp_", password=COOKIE_PASSWORD)
if not cookies.ready():
    st.stop()

def get_or_set_visitor_id() -> str:
    vid = cookies.get("visitor_id")
    if not vid:
        vid = str(uuid.uuid4())
        cookies["visitor_id"] = vid
        cookies.save()
    return vid

# ===========================
# –ë–∏–∑–Ω–µ—Å-—Å–ª–æ–π: Votes + Analytics (sessions/events/durations)
# ===========================

# --- Votes ---
def add_vote(choice: str) -> bool:
    """
    –ü–∏—à–µ–º –≥–æ–ª–æ—Å —Å voter_id –∏–∑ cookie. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω,
    False ‚Äî –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å—Ä–∞–±–æ—Ç–∞–ª).
    """
    try:
        sb.table("votes").insert({"choice": choice, "voter_id": st.session_state.visitor_id}).execute()
        return True
    except Exception:
        return False

def has_voted() -> bool:
    r = sb.table("votes").select("id").eq("voter_id", st.session_state.visitor_id).limit(1).execute()
    return bool(r.data)

def get_counts():
    likes = sb.table("votes").select("id", count="exact", head=True).eq("choice", "like").execute().count or 0
    dislikes = sb.table("votes").select("id", count="exact", head=True).eq("choice", "dislike").execute().count or 0
    return likes, dislikes

# --- Analytics (sessions / events / durations) ---
def ensure_session():
    # visitor_id ‚Äî –∏–∑ –∫—É–∫–∏
    if "visitor_id" not in st.session_state:
        st.session_state.visitor_id = get_or_set_visitor_id()
    if "session_id" not in st.session_state:
        st.session_state.session_id = str(uuid.uuid4())
        sb.table("sessions").upsert(
            {"visitor_id": st.session_state.visitor_id, "session_id": st.session_state.session_id},
            on_conflict="session_id"
        ).execute()

def touch_session():
    sb.table("sessions").update({"last_seen": datetime.now(timezone.utc).isoformat()}) \
      .eq("session_id", st.session_state.session_id).execute()

def log_event(page: str, event_type: str, meta: str = None):
    sb.table("events").insert({
        "visitor_id": st.session_state.visitor_id,
        "session_id": st.session_state.session_id,
        "page": page, "event_type": event_type, "meta": meta
    }).execute()

def add_time(page: str, seconds: int):
    # upsert –ø–æ (session_id, page)
    existing = sb.table("durations").select("seconds") \
        .eq("session_id", st.session_state.session_id).eq("page", page).execute()
    if existing.data:
        cur = existing.data[0].get("seconds", 0) or 0
        sb.table("durations").update({"seconds": cur + int(seconds)}) \
          .eq("session_id", st.session_state.session_id).eq("page", page).execute()
    else:
        sb.table("durations").insert({
            "session_id": st.session_state.session_id, "page": page, "seconds": int(seconds)
        }).execute()

def start_page_timer(current_page: str):
    """–§–∏–∫—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –∏ –ª–æ–≥–∏—Ä—É–µ–º page_view."""
    ensure_session(); touch_session()
    now = time.time()
    prev_page = st.session_state.get("current_page")
    prev_ts   = st.session_state.get("page_enter_ts")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–µ—Å–ª–∏ –±—ã–ª–∞)
    if prev_page and prev_ts is not None and prev_page != current_page:
        add_time(prev_page, int(max(0, now - prev_ts)))

    # –°—Ç–∞—Ä—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π
    if prev_page != current_page:
        log_event(current_page, "page_view")
        st.session_state["current_page"]  = current_page
        st.session_state["page_enter_ts"] = now

def finalize_time_on_rerun():
    touch_session()

# ===========================
# CSS (–ª–µ–≤—ã–π –∫—Ä–∞–π + —á–∏–ø—Å—ã + –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Å–ø–∏—Å–∫–∏)
# ===========================
st.markdown("""
<style>
.block-container{
    max-width:100% !important;
    padding-left:12px; padding-right:32px; padding-top:10px;
    margin-left:0 !important; margin-right:0 !important;
}
header[data-testid="stHeader"]{ background:transparent; }

.hero-subtitle{ font-size:1.08rem; opacity:.9; margin-top:-6px; }
.likes-wrap{ padding-top:16px; }

.chips{ display:flex; flex-wrap:wrap; gap:8px; margin-top:6px; }
.chip{
    display:inline-block; padding:6px 10px; line-height:1; white-space:nowrap;
    border:1px solid rgba(0,0,0,.12); border-radius:999px; font-size:.92rem;
    background:rgba(0,0,0,.03);
}
.section-title{ margin:10px 0 4px 0; }
.tight li{ margin:.28rem 1; }  /* —Ñ–∏–∫—Å –æ–ø–µ—á–∞—Ç–∫–∏ */
/* —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –∑–∞–∑–æ—Ä –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏ —Ç–æ–ª—å–∫–æ –≤ —Å–µ–∫—Ü–∏–∏ CTA */
.cta-row [data-testid="column"]{ padding-right:48px; }   /* –º–µ–Ω—è–π 48px */
.cta-row [data-testid="column"]:last-child{ padding-right:0; }
</style>
""", unsafe_allow_html=True)

# ===========================
# –ù–∞–≤–∏–≥–∞—Ü–∏—è
# ===========================
st.sidebar.title("–ú–µ–Ω—é")
page = st.sidebar.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
    ["–ì–ª–∞–≤–Ω–∞—è", "–î–∞—à–±–æ—Ä–¥—ã", "A/B-—Ç–µ—Å—Ç—ã", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∞–π—Ç–∞", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"]
)

# ===========================
# helper: –ö–Ω–æ–ø–∫–∞ ¬´–ª–æ–≥ + –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É¬ª
# ===========================
def log_and_open(label: str, url: str, page_name: str, event_name: str, key: str):
    """
    –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞: –ø—Ä–∏ –∫–ª–∏–∫–µ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Supabase –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ.
    """
    if st.button(label, type="primary", key=key):
        log_event(page_name, event_name)
        st.session_state["_redirect_url"] = url
        st.rerun()

    if st.session_state.get("_redirect_url"):
        components.html(
            f"""<script>window.open("{st.session_state["_redirect_url"]}", "_blank");</script>""",
            height=0, width=0
        )
        st.session_state["_redirect_url"] = None

# ===========================
# –°–¢–†–ê–ù–ò–¶–´
# ===========================

# --- –ì–ª–∞–≤–Ω–∞—è ---
if page == "–ì–ª–∞–≤–Ω–∞—è":
    start_page_timer("–ì–ª–∞–≤–Ω–∞—è")

    left, _ = st.columns([0.8, 0.2])
    with left:
        st.title("üìä –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ú–∞—Ç–≤–µ—è –°–ø–∏—Ü—ã–Ω–∞")
        st.markdown(
            "<div class='hero-subtitle'>–ê–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö ¬∑ SQL ¬∑ Python ¬∑ Power BI ¬∑ A/B-—Ç–µ—Å—Ç—ã</div>",
            unsafe_allow_html=True
        )

    st.header("–û–±–æ –º–Ω–µ")
    st.markdown("""
- üéì 4 –∫—É—Ä—Å –°–æ—á–∏–Ω—Å–∫–æ–≥–æ –≥–æ—Å—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ (¬´–¶–∏—Ñ—Ä–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏¬ª).
- üß∞ –°—Ç–µ–∫: **SQL** (ClickHouse, PostgreSQL), **Python** (pandas, plotly, pingouin),
  **BI** (DataLens, Power BI, Tableau), **Airflow**.
- üìä –ú–µ—Ç—Ä–∏–∫–∏: **CR, ARPU/ARPPU, Retention, DAU/WAU/MAU, Stickiness, CAC**
- üß™ –≠–∫—Å–ø–µ—Ä–µ–º–µ–Ω—Ç—ã: –±–∏–∑–Ω–µ—Å-–∞—Å–ø–µ–∫—Ç —ç–∫—Å–ø–µ—Ä–µ–º–µ–Ω—Ç–∞, –¥–∏–∑–∞–π–Ω —ç–∫—Å–ø–µ—Ä–µ–º–µ–Ω—Ç–∞ (a/b): MDE, –º–æ—â–Ω–æ—Å—Ç—å, —Å—Ç–∞—Ç. –∑–Ω–∞—á–∏–º–æ—Å—Ç—å, —Å—Ç–∞—Ç. –∫—Ä–∏—Ç–µ—Ä–∏–π, —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø.
- üìà –î–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ **Wildberries** —Å–æ–±—Ä–∞–ª –≤–∏—Ç—Ä–∏–Ω—É –∏ –¥–∞—à–±–æ—Ä–¥ –≤ DataLens ‚Äî —Å–Ω–∏–∑–∏–ª –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ —Å ~2 —á–∞—Å–æ–≤ –¥–æ **15 –º–∏–Ω—É—Ç**.
- üöÄ –ò—â—É —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É/–¥–∂—É–Ω–∏–æ—Ä-—Ä–æ–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∞. –ë—ã—Å—Ç—Ä–æ –≤—Ö–æ–∂—É –≤ –¥–æ–º–µ–Ω, –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É—é –≥–∏–ø–æ—Ç–µ–∑—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –¥–µ—Ä–∂—É —Ñ–æ–∫—É—Å –Ω–∞ –±–∏–∑–Ω–µ—Å-—ç—Ñ—Ñ–µ–∫—Ç–µ.
    """)

    st.markdown("<h4 class='section-title'>–ù–∞–≤—ã–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</h4>", unsafe_allow_html=True)
    st.markdown(
        "<div class='chips'>"
        "<span class='chip'>SQL</span><span class='chip'>ClickHouse</span><span class='chip'>PostgreSQL</span>"
        "<span class='chip'>Python</span><span class='chip'>pandas</span><span class='chip'>plotly</span>"
        "<span class='chip'>Power BI</span><span class='chip'>DataLens</span><span class='chip'>Tableau</span>"
        "<span class='chip'>Airflow</span><span class='chip'>A/B-—Ç–µ—Å—Ç—ã</span><span class='chip'>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</span>"
        "</div>",
        unsafe_allow_html=True
    )

    st.markdown("<h4 class='section-title'>–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω</h4>", unsafe_allow_html=True)
    st.markdown("""
<ul class="tight">
<li>–î–∞—à–±–æ—Ä–¥—ã –ø–æ–¥ –∑–∞–¥–∞—á–∏ –±–∏–∑–Ω–µ—Å–∞ (DataLens/Power BI)</li>
<li>SQL-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å</li>
<li>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞/–ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ <b>A/B-—Ç–µ—Å—Ç–æ–≤</b>, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</li>
<li>–ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã –≥–∏–ø–æ—Ç–µ–∑ –∏ –º–µ—Ç—Ä–∏–∫</li>
</ul>
        """, unsafe_allow_html=True)

    # CTA: 3 ¬´—É–º–Ω—ã–µ¬ª –∫–Ω–æ–ø–∫–∏ (–ª–æ–≥ + –ø–µ—Ä–µ—Ö–æ–¥)
    st.markdown("<h4 class='section-title'>–ë—ã—Å—Ç—Ä–∞—è —Å–≤—è–∑—å —Å–æ –º–Ω–æ–π</h4>", unsafe_allow_html=True)
    cta1, cta2, cta3 = st.columns([1.2, 1, 1.4])
    with cta1:
        log_and_open("üì® –û—Ç–∫—Ä—ã—Ç—å Telegram", "https://t.me/cldmatv",
                     page_name="–ì–ª–∞–≤–Ω–∞—è", event_name="tg_click", key="tg_main")
    with cta2:
        log_and_open("üê± –û—Ç–∫—Ä—ã—Ç—å GitHub", "https://github.com/MSSAS",
                     page_name="–ì–ª–∞–≤–Ω–∞—è", event_name="gh_click", key="gh_main")
    with cta3:
        log_and_open("üìÑ –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–∑—é–º–µ", "https://sochi.hh.ru/resume/b872d5b3ff0f3adc440039ed1f786c7a745332",
                     page_name="–ì–ª–∞–≤–Ω–∞—è", event_name="resume_click", key="cv_main")

    finalize_time_on_rerun()

# --- –î–∞—à–±–æ—Ä–¥—ã ---
elif page == "–î–∞—à–±–æ—Ä–¥—ã":
    start_page_timer("–î–∞—à–±–æ—Ä–¥—ã")

    st.header("üìà –ú–æ–∏ –¥–∞—à–±–æ—Ä–¥—ã")
    st.write("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥—ã –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á.")

    tab1, tab2 = st.tabs(["–ê–≤–∞—Ä–∏–π–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ñ–ö–•", "–ó–∞—Ä—É–±–µ–∂–Ω—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å"])
    with tab1:
        iframe_code = """
        <iframe title="–ê–≤–∞—Ä–∏–π–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ñ–ö–•" width="1700" height="900" src="https://datalens.yandex/8ddgy8naysj4u"></iframe>
        """
        components.html(iframe_code, height=800)
    with tab2:
        st.subheader("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ ‚Äî –ó–∞—Ä—É–±–µ–∂–Ω—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å")
        st.write("–ó–∞–¥–∞—á–∞: –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂, –ø—Ä–∏–±—ã–ª–∏, AKB, —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞ –∏ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ —Å–µ–≥–º–µ–Ω—Ç–∞–º.")
        st.link_button("üì• –°–∫–∞—á–∞—Ç—å .pbix", "https://drive.google.com/drive/folders/1zlu_QaB6J96GlohndvQwuAnbmle2USGo?usp=sharing")

        img_path = Path(__file__).parent / "assets" / "sales_dashboard.png"
        if img_path.exists():
            st.image(str(img_path), caption="–î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂", use_container_width=True)
        else:
            st.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–º–µ—Å—Ç–∏ —Ñ–∞–π–ª –≤ `assets/sales_dashboard.png`")

    finalize_time_on_rerun()

# --- A/B-—Ç–µ—Å—Ç—ã ---
elif page == "A/B-—Ç–µ—Å—Ç—ã":
    start_page_timer("A/B-—Ç–µ—Å—Ç—ã")

    st.header("üß™ A/B-—Ç–µ—Å—Ç –Ω–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏ –æ–ø–ª–∞—Ç—ã (–Ω–∞ –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)")
    st.subheader("–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è")
    st.write("""
- üìä –ú–µ—Ç—Ä–∏–∫–∏: CR, ARPU.
- üìê –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏; t-test –∏ œá¬≤-—Ç–µ—Å—Ç.
- üìà –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è p-value –∏ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤.
    """)
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã (–ø—Ä–∏–º–µ—Ä)")
    st.write("""
- **A (–∫–æ–Ω—Ç—Ä–æ–ª—å):** CR = 2.1%, ARPU = 1500 ‚ÇΩ  
- **B (–Ω–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞):** CR = 2.3%, ARPU = 1550 ‚ÇΩ  
- **p-value (t-test ARPU):** 0.03 (< 0.05) ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ  
- **–ò—Ç–æ–≥:** –Ω–æ–≤—É—é –º–µ—Ö–∞–Ω–∏–∫—É ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –∫ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é
    """)
    st.link_button("–ö–æ–¥ –Ω–∞ GitHub", "https://github.com/MSSAS/AB-test_payment")

    finalize_time_on_rerun()

# --- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∞–π—Ç–∞ ---
elif page == "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∞–π—Ç–∞":
    start_page_timer("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∞–π—Ç–∞")

    st.header("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∞–π—Ç–∞ (Supabase)")

    # –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ (1-user-1-vote)
    st.subheader("–û—Ü–µ–Ω–∫–∞ —Å–∞–π—Ç–∞")
    likes, dislikes = get_counts()
    total = likes + dislikes
    approval = (likes/total*100) if total else 0

    c1, c2, c3 = st.columns(3)
    with c1: st.metric("üëç –õ–∞–π–∫–∏", likes)
    with c2: st.metric("üëé –î–∏–∑–ª–∞–π–∫–∏", dislikes)
    with c3: st.metric("–û–¥–æ–±—Ä–µ–Ω–∏–µ", f"{approval:.0f}%")

    already_voted = has_voted()
    b1, b2 = st.columns(2)
    with b1:
        if st.button("üëç –õ–∞–π–∫", use_container_width=True, disabled=already_voted):
            if add_vote("like"):
                st.success("–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å!")
                st.rerun()
            else:
                st.info("–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏.")
    with b2:
        if st.button("üëé –î–∏–∑–ª–∞–π–∫", use_container_width=True, disabled=already_voted):
            if add_vote("dislike"):
                st.success("–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å!")
                st.rerun()
            else:
                st.info("–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏.")

    st.divider()
    st.subheader("–ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏, —Å–µ—Å—Å–∏–∏ –∏ —Å–æ–±—ã—Ç–∏—è")

    # –∞–≥—Ä–µ–≥–∞—Ç—ã –∏–∑ Supabase
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ (distinct visitor_id) ‚Äî –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ distinct
    vis_rows = sb.table("sessions").select("visitor_id").execute().data or []
    visitors = len({r.get("visitor_id") for r in vis_rows if r.get("visitor_id")})

    # –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π
    sessions = sb.table("sessions").select("session_id", count="exact", head=True).execute().count or 0

    # –ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü
    pv_rows = sb.table("events").select("page").eq("event_type", "page_view").execute().data or []
    pageviews = Counter([r["page"] for r in pv_rows if r.get("page")])

    # –ö–ª–∏–∫–∏ –ø–æ CTA
    tg_clicks = sb.table("events").select("id", count="exact", head=True).eq("event_type","tg_click").execute().count or 0
    gh_clicks = sb.table("events").select("id", count="exact", head=True).eq("event_type","gh_click").execute().count or 0
    cv_clicks = sb.table("events").select("id", count="exact", head=True).eq("event_type","resume_click").execute().count or 0

    # –í—Ä–µ–º—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
    dur_rows = sb.table("durations").select("page,seconds").execute().data or []
    durations = {r["page"]: (r.get("seconds") or 0) for r in dur_rows if r.get("page")}


    d1, d2, d3, d4 = st.columns(4)
    with d1: st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏", visitors)
    with d2: st.metric("–°–µ—Å—Å–∏–∏", sessions)
    with d3: st.metric("–ö–ª–∏–∫–∏ –≤ Telegram", tg_clicks)
    with d4: st.metric("–ö–ª–∏–∫–∏ GitHub", gh_clicks)

    e1, e2, e3 = st.columns(3)
    with e1: st.metric("–ö–ª–∏–∫–∏ –†–µ–∑—é–º–µ", cv_clicks)

    home_pv = pageviews.get("–ì–ª–∞–≤–Ω–∞—è", 0)
    ctr_tg = (tg_clicks / home_pv * 100) if home_pv else 0
    ctr_gh = (gh_clicks / home_pv * 100) if home_pv else 0
    ctr_cv = (cv_clicks / home_pv * 100) if home_pv else 0

    c1, c2, c3 = st.columns(3)
    with c1: st.metric("CTR Telegram (–æ—Ç –ì–ª–∞–≤–Ω–æ–π)", f"{ctr_tg:.1f}%")
    with c2: st.metric("CTR GitHub (–æ—Ç –ì–ª–∞–≤–Ω–æ–π)", f"{ctr_gh:.1f}%")
    with c3: st.metric("CTR –†–µ–∑—é–º–µ (–æ—Ç –ì–ª–∞–≤–Ω–æ–π)", f"{ctr_cv:.1f}%")

    st.markdown("#### –í—Ä–µ–º—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö (—Å—É–º–º–∞—Ä–Ω–æ)")
    cols = st.columns(5)
    pages_list = ["–ì–ª–∞–≤–Ω–∞—è", "–î–∞—à–±–æ—Ä–¥—ã", "A/B-—Ç–µ—Å—Ç—ã", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∞–π—Ç–∞", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"]
    for i, p in enumerate(pages_list):
        with cols[i % 5]:
            sec = int(durations.get(p, 0) or 0)
            mm, ss = divmod(sec, 60)
            st.metric(p, f"{mm:02d}:{ss:02d}")

    st.markdown("#### –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è")
    st.code(f"visitor_id={st.session_state.visitor_id}\nsession_id={st.session_state.session_id}", language="text")

    finalize_time_on_rerun()

# --- –ö–æ–Ω—Ç–∞–∫—Ç—ã ---
elif page == "–ö–æ–Ω—Ç–∞–∫—Ç—ã":
    start_page_timer("–ö–æ–Ω—Ç–∞–∫—Ç—ã")

    st.header("üì¨ –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π")
    st.write("–û—Ç–∫—Ä—ã—Ç –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ –∏ —Ä–∞–±–æ—Ç–µ!")
    st.write("- üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (938) 425-24-03")
    st.write("- ‚úâÔ∏è Email: sp1tsyn1@yandex.ru")
    st.write("- üê± GitHub: [github.com/MSSAS](https://github.com/MSSAS)")
    st.write("- üì± Telegram: [@cldmatv](https://t.me/cldmatv)")

    finalize_time_on_rerun()